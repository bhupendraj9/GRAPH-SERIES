/*
intution - 
all those 1's which can not be traversed by starting traversal from the boundry 1's will be enclaves
*/
class Solution {
public:

     void dfs(int i,int j,vector<vector<int>>& grid,vector<vector<int>>& visited)
   {
         visited[i][j]=1;
        int n=grid.size();
        int m=grid[0].size();
        //here neighbours are top left right bottom 
        //top
        if(i-1>=0 && grid[i-1][j]==1 && !visited[i-1][j]) dfs(i-1,j,grid,visited);
        //bottom
         if(i+1<n && grid[i+1][j]==1 && !visited[i+1][j]) dfs(i+1,j,grid,visited);
        //left
         if(j-1>=0 && grid[i][j-1]==1 && !visited[i][j-1]) dfs(i,j-1,grid,visited);
        //right
         if(j+1<m && grid[i][j+1]==1 && !visited[i][j+1]) dfs(i,j+1,grid,visited);
       

   }
    int numEnclaves(vector<vector<int>>& grid) {
     int n=grid.size();
     int m=grid[0].size();
     vector<vector<int>>visited(n,vector<int>(m,0));
     for(int i=0;i<m;i++)
     {
        if(grid[0][i]==1 && !visited[0][i]) dfs(0,i,grid,visited);
        if(grid[n-1][i]==1 && !visited[n-1][i]) dfs(n-1,i,grid,visited);
     }    

       for(int i=0;i<n;i++)
     {
        if(grid[i][0]==1 && !visited[i][0]) dfs(i,0,grid,visited);
        if(grid[i][m-1]==1 && !visited[i][m-1]) dfs(i,m-1,grid,visited);
     }  
     int ct=0; 
     for(int i=0;i<n;i++)
     {
         for(int j=0;j<m;j++)
         {
             if(grid[i][j]==1 && !visited[i][j])
              ct++;
         }
     }
     return ct;
    }
};
