//METHOD 1 - BY BFS

class Solution {
  public:
    bool bfs(int node,vector<int>adj[],vector<int>&visited)
    {
      queue<pair<int,int>>q;
      q.push({node,-1});
      while(!q.empty())
      {
          node=q.front().first;
          int parent=q.front().second;
          q.pop();
          
          for(auto it:adj[node])
          {
              if(!visited[it])
              {
                  visited[it]=1;
                  q.push({it,node});
              }
              else if(it!=parent)
              return true;
          }
      }
      return false;
    }
    bool isCycle(int n, vector<int> adj[]) {
      vector<int>visited(n,0);
      
      for(int i=0;i<n;i++)
      {
          if(!visited[i])
          {  
              visited[i]=1;
              if(bfs(i,adj,visited)) return true;
          }
      }
      return false;
      
    }
};


//METHOD 2 - BY DFS

class Solution {
  public:
    bool dfs(int node,int parent,vector<int>&visited,vector<int>adj[])
    {
      visited[node]=1;
      for(auto it:adj[node])
      {
          if(!visited[it])
          {
              if(dfs(it,node,visited,adj)) return true;
          }
          else if(it!=parent)
          return true;
      }
      return false;
    }
    bool isCycle(int n, vector<int> adj[]) {
      vector<int>visited(n,0);
      for(int i=0;i<n;i++)
      {
          if(!visited[i])
          {
              if(dfs(i,-1,visited,adj)) return true;
          }
      }
      return false;
    }
};
