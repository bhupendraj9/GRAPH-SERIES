class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
       int time=0;
       queue<pair<pair<int,int>,int>>q; 
       int n=grid.size();
       int m=grid[0].size();
       vector<vector<int>>visited(n,vector<int>(m,0));
       for(int i=0;i<n;i++)
       {
           for(int j=0;j<m;j++)
           {
               if(grid[i][j]==2)
               {
                   q.push({{i,j},0});
                   visited[i][j]=1;
               }   
           }
       }
       while(!q.empty())
       {
          pair<pair<int,int>,int> temp=q.front();
          q.pop();
          int i=temp.first.first;
          int j=temp.first.second;
          int t=temp.second;

          time= max(time,t);
        //top
        if(i-1>=0 && grid[i-1][j]==1 && !visited[i-1][j]) 
        {
         visited[i-1][j]=1;
         grid[i-1][j]=2;
         q.push({{i-1,j},t+1});
         }
        //bottom
         if(i+1<n && grid[i+1][j]==1 && !visited[i+1][j]) 
         {
          visited[i+1][j]=1;
          grid[i+1][j]=2;
         q.push({{i+1,j},t+1});
        }
        //left
         if(j-1>=0 && grid[i][j-1]==1 && !visited[i][j-1])
         {
         visited[i][j-1]=1;
         grid[i][j-1]=2;
         q.push({{i,j-1},t+1});
        }
        //right
         if(j+1<m && grid[i][j+1]==1 && !visited[i][j+1]) 
         {
          visited[i][j+1]=1;
          grid[i][j+1]=2;
         q.push({{i,j+1},t+1});
        } 
       }

        for(int i=0;i<n;i++)
       {
           for(int j=0;j<m;j++)
           {
               if(grid[i][j]==1)
               {
                 return -1;
               }   
           }
       }
      return time;

    }
};
