//algorithm - 
/*
we have to simply find out how many components are there 
so what we will do is simply iterate over the each element and if it is not visited then call any of the traversal for it and accordingly increment count
*/

class Solution {
public:
    void dfs(int node,vector<int>&visited,vector<int>adj[])
    {
        visited[node]=1;
        for(auto it:adj[node])
        {
          if(!visited[it])
          dfs(it,visited,adj);  
        }
    }
    int findCircleNum(vector<vector<int>>& isConnected) {
        //constructing adjacency matrix
        int n=isConnected.size();
        vector<int>adj[n];
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
               if(isConnected[i][j]==1 && i!=j)
               {
                   adj[i].push_back(j);
                   adj[j].push_back(i);
               }
            }
        }
        vector<int>visited(n,0);
        int ct=0;
        //counting 
        for(int i=0;i<n;i++)
        {
            if(!visited[i])
            {
                ct++;
                dfs(i,visited,adj);
            }
        }
        return ct;
    }
};
