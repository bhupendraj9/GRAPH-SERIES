#include<bits/stdc++.h>
void bfs(int r,int c,vector<vector<int>> &image,vector<vector<int>> &copy,
vector<vector<int>> &visited,int color)
{
  queue<pair<int,int>>q;
  q.push({r,c});
   
  int n=image.size();
  int m=image[0].size();

  int dr[]={-1,1,0,0};
  int dc[]={0,0,-1,1};
  while(!q.empty())
  {
    int r=q.front().first;
    int c=q.front().second;
    q.pop();

  for(int i=0;i<4;i++)
  {
      int newr=r+dr[i];
      int newc=c+dc[i];

      if(newr<n && newr>=0 && newc<m && newc>=0 && !visited[newr][newc] && 
      image[newr][newc]==image[r][c])
      {
          copy[newr][newc]=color;
          visited[newr][newc]=1;
          bfs(newr,newc,image,copy,visited,color);
      } 
  }
  }
}

vector<vector<int>> floodFill(vector<vector<int>> &image, int x, int y, int c)
{
   int n=image.size();
   int m= image[0].size();

   vector<vector<int>>visited(n,vector<int>(m,0));

   vector<vector<int>>copy=image;

   copy[x][y]=c;

   bfs(x,y,image,copy,visited,c);

   return copy;
}
