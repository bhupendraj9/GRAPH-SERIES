/*
algorithm 
-one thing  to notice is that the cells which are at boundry and having value O are not surrounded by
X from 4 sides , similarly those O's which are directly connected to them are also not surrounded by O by 
4 sides
-so we wll carry out the dfs for all the boundry O's and those O's whicch will remain unvisited will be later converted to X
*/
class Solution {
public:
   void dfs(int i,int j,vector<vector<char>>& board,vector<vector<int>>& visited)
   {
         visited[i][j]=1;
        int n=board.size();
        int m=board[0].size();
        //here neighbours are top left right bottom 
        //top
        if(i-1>=0 && board[i-1][j]=='O' && !visited[i-1][j]) dfs(i-1,j,board,visited);
        //bottom
         if(i+1<n && board[i+1][j]=='O' && !visited[i+1][j]) dfs(i+1,j,board,visited);
        //left
         if(j-1>=0 && board[i][j-1]=='O' && !visited[i][j-1]) dfs(i,j-1,board,visited);
        //right
         if(j+1<m && board[i][j+1]=='O' && !visited[i][j+1]) dfs(i,j+1,board,visited);
       

   }
    void solve(vector<vector<char>>& board) {
        int n=board.size();
        int m=board[0].size();
        vector<vector<int>>visited(n,vector<int>(m,0));

        queue<pair<int,int>>q;

        for(int i=0;i<m;i++)
        {
           if(board[0][i]=='O') dfs(0,i,board,visited);
           if(board[n-1][i]=='O')  dfs(n-1,i,board,visited);
        }

        for(int i=0;i<n;i++)
        {
           if(board[i][0]=='O') dfs(i,0,board,visited);
           if(board[i][m-1]=='O')  dfs(i,m-1,board,visited);
        }

        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(board[i][j]=='O' && !visited[i][j])
                 board[i][j]='X';
            }
        }
    }
};
