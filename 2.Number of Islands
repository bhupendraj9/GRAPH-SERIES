//algorithm 
/*
 considering each cell of the grid as a node we will iterate over each cell and we 
 will maintain a visited matrix as usual and if the cell is not visited and it is land 
 that is contains '1' then we will call any of traversal for it and increment count 
*/
class Solution {
public:
    void dfs(int i,int j,vector<vector<int>>&visited,vector<vector<char>>&grid)
    {
        visited[i][j]=1;
        int n=grid.size();
        int m=grid[0].size();
        //here neighbours are top left right bottom 
        //top
        if(i-1>=0 && grid[i-1][j]=='1' && !visited[i-1][j]) dfs(i-1,j,visited,grid);
        //bottom
         if(i+1<n && grid[i+1][j]=='1' && !visited[i+1][j]) dfs(i+1,j,visited,grid);
        //left
         if(j-1>=0 && grid[i][j-1]=='1' && !visited[i][j-1]) dfs(i,j-1,visited,grid);
        //right
         if(j+1<m && grid[i][j+1]=='1' && !visited[i][j+1]) dfs(i,j+1,visited,grid);

    }
    int numIslands(vector<vector<char>>& grid) {
       int n=grid.size();
       int m=grid[0].size();
       vector<vector<int>>visited(n,vector<int>(m,0)); 
       int ct=0;
       for(int i=0;i<n;i++)
       {
           for(int j=0;j<m;j++)
           {
               if(!visited[i][j] && grid[i][j]=='1')
                {
                    ct++;
                    dfs(i,j,visited,grid);
                }
           }
       }
       return ct;
    }
};
